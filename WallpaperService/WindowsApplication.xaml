<Application x:Class="Overmind.ImageManager.WallpaperService.WindowsApplication"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:taskbar="http://www.hardcodet.net/taskbar"
             xmlns:main="clr-namespace:Overmind.ImageManager.WallpaperService"
             mc:Ignorable="d"
             Startup="Application_Startup" Exit="Application_Exit" ShutdownMode="OnExplicitShutdown">

    <Application.Resources>
        <taskbar:TaskbarIcon x:Key="NotificationIcon" d:DataContext="{d:DesignInstance Type=main:MainViewModel}"
                             IconSource="/Resources/Logo.ico" ToolTipText="{x:Static main:WindowsApplication.ApplicationTitle}" TrayMouseDoubleClick="ShowMainWindow">
            <taskbar:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem Click="ShowMainWindow">
                        <MenuItem.Icon>
                            <Image Source="/Resources/Logo.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                        </MenuItem.Icon>
                        <MenuItem.Header>
                            <TextBlock Text="{x:Static main:WindowsApplication.ApplicationTitle}" FontWeight="Bold"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="{Binding Path=NextWallpaperCommand}">
                        <MenuItem.Header>
                            <TextBlock Text="Next wallpaper"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Command="{Binding Path=CopyWallpaperHashCommand}">
                        <MenuItem.Header>
                            <TextBlock Text="Copy wallpaper hash"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Command="{Binding Path=ReloadSettingsCommand}">
                        <MenuItem.Header>
                            <TextBlock Text="Reload settings"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Click="ExitApplication">
                        <MenuItem.Header>
                            <TextBlock Text="Exit"/>
                        </MenuItem.Header>
                    </MenuItem>
                </ContextMenu>
            </taskbar:TaskbarIcon.ContextMenu>
        </taskbar:TaskbarIcon>

        <!-- Colors (https://clrs.cc/) -->
        <SolidColorBrush x:Key="NavyBrush" Color="#001f3f"/>
        <SolidColorBrush x:Key="BlueBrush" Color="#0074D9"/>
        <SolidColorBrush x:Key="AquaBrush" Color="#7FDBFF"/>
        <SolidColorBrush x:Key="TealBrush" Color="#39CCCC"/>
        <SolidColorBrush x:Key="OliveBrush" Color="#3D9970"/>
        <SolidColorBrush x:Key="GreenBrush" Color="#2ECC40"/>
        <SolidColorBrush x:Key="LimeBrush" Color="#01FF70"/>
        <SolidColorBrush x:Key="YellowBrush" Color="#FFDC00"/>
        <SolidColorBrush x:Key="OrangeBrush" Color="#FF851B"/>
        <SolidColorBrush x:Key="RedBrush" Color="#FF4136"/>
        <SolidColorBrush x:Key="MaroonBrush" Color="#85144b"/>
        <SolidColorBrush x:Key="FuchsiaBrush" Color="#F012BE"/>
        <SolidColorBrush x:Key="PurpleBrush" Color="#B10DC9"/>
        <SolidColorBrush x:Key="BlackBrush" Color="#111111"/>
        <SolidColorBrush x:Key="GrayBrush" Color="#AAAAAA"/>
        <SolidColorBrush x:Key="SilverBrush" Color="#DDDDDD"/>

        <!-- Global styles and templates -->
        <SolidColorBrush x:Key="HighlightBrush" Color="#7FDBFF" Opacity="0.5"/>

        <Style TargetType="Menu">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Menu">
                        <Border Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}">
                            <ItemsPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ContextMenu">
            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border BorderBrush="{StaticResource GrayBrush}" BorderThickness="1"
                                Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Rectangle Fill="{StaticResource GrayBrush}" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
            <Border x:Name="templateRoot">
                <Grid>
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Header}" Margin="5,2" RecognizesAccessKey="True"/>
                    <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border BorderBrush="{StaticResource GrayBrush}" BorderThickness="1"
                                Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Rectangle Fill="{StaticResource GrayBrush}" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource HighlightBrush}"/>
                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
            <Border x:Name="templateRoot">
                <Grid Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="1"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="HeaderTextGroup" MinWidth="50" MaxWidth="300"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="GestureTextGroup"/>
                        <ColumnDefinition Width="10"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="0" Content="{TemplateBinding Icon}" Height="16" Width="16" Margin="4" VerticalAlignment="Center"/>
                    <!-- <fa:ImageAwesome x:Name="check" Icon="Check" Height="8" Width="8" Margin="8" VerticalAlignment="Center" Visibility="Collapsed"/> -->
                    <ContentPresenter Grid.Column="2" Content="{TemplateBinding Header}" Margin="5,2" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    <TextBlock Grid.Column="3" Text="{TemplateBinding InputGestureText}" Margin="5,2" VerticalAlignment="Center"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <!-- <Trigger Property="IsChecked" Value="True">
                    <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                </Trigger> -->
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource HighlightBrush}"/>
                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Separator">
                        <Rectangle Margin="33,2,2,2" Height="1" Fill="{StaticResource GrayBrush}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
