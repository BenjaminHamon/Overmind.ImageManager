<Application x:Class="Overmind.ImageManager.WindowsClient.WindowsApplication"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:Overmind.WpfExtensions.Converters;assembly=Overmind.WpfExtensions"
             xmlns:extensions="clr-namespace:Overmind.ImageManager.WindowsClient.Extensions"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:main="clr-namespace:Overmind.ImageManager.WindowsClient"
             Startup="Application_Startup" Exit="Application_Exit" ShutdownMode="OnExplicitShutdown">

    <Application.Resources>
        <BooleanToVisibilityConverter x:Key="VisibilityConverter"/>
        <main:StringToImageConverter x:Key="DefaultImageConverter"/>
        <converters:ExceptionToStringConverter x:Key="ExceptionConverter"/>
        <converters:ValidationErrorsToStringConverter x:Key="ValidationConverter"/>

        <!-- Colors (https://clrs.cc/) -->
        <SolidColorBrush x:Key="NavyBrush" Color="#001f3f"/>
        <SolidColorBrush x:Key="BlueBrush" Color="#0074D9"/>
        <SolidColorBrush x:Key="AquaBrush" Color="#7FDBFF"/>
        <SolidColorBrush x:Key="TealBrush" Color="#39CCCC"/>
        <SolidColorBrush x:Key="OliveBrush" Color="#3D9970"/>
        <SolidColorBrush x:Key="GreenBrush" Color="#2ECC40"/>
        <SolidColorBrush x:Key="LimeBrush" Color="#01FF70"/>
        <SolidColorBrush x:Key="YellowBrush" Color="#FFDC00"/>
        <SolidColorBrush x:Key="OrangeBrush" Color="#FF851B"/>
        <SolidColorBrush x:Key="RedBrush" Color="#FF4136"/>
        <SolidColorBrush x:Key="MaroonBrush" Color="#85144b"/>
        <SolidColorBrush x:Key="FuchsiaBrush" Color="#F012BE"/>
        <SolidColorBrush x:Key="PurpleBrush" Color="#B10DC9"/>
        <SolidColorBrush x:Key="BlackBrush" Color="#111111"/>
        <SolidColorBrush x:Key="GrayBrush" Color="#AAAAAA"/>
        <SolidColorBrush x:Key="SilverBrush" Color="#DDDDDD"/>

        <SolidColorBrush x:Key="DefaultButtonBrush" Color="#EEEEEE"/>
        <SolidColorBrush x:Key="DefaultBorderBrush" Color="#555555"/>
        <SolidColorBrush x:Key="DisabledButtonBrush" Color="#EEEEEE"/>
        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#CCCCCC"/>
        <SolidColorBrush x:Key="SelectionHighlightBrush" Color="#7FDBFF" Opacity="0.5"/>
        <SolidColorBrush x:Key="HighlightBrush" Color="#7FDBFF" Opacity="0.3"/>
        <SolidColorBrush x:Key="PressBrush" Color="#4CCFFF" Opacity="0.3"/>

        <!-- Menus -->
        <Style TargetType="Menu">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Menu">
                        <Border Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}">
                            <ItemsPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ContextMenu">
            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border BorderBrush="{StaticResource GrayBrush}" BorderThickness="1"
                                Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Rectangle Fill="{StaticResource GrayBrush}" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
            <Border x:Name="templateRoot">
                <Grid>
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Header}" Margin="5,2" RecognizesAccessKey="True"/>
                    <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border BorderBrush="{StaticResource GrayBrush}" BorderThickness="1"
                                Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Rectangle Fill="{StaticResource GrayBrush}" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource HighlightBrush}"/>
                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
            <Border x:Name="templateRoot">
                <Grid Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="1"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="HeaderTextGroup" MinWidth="50" MaxWidth="300"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="GestureTextGroup"/>
                        <ColumnDefinition Width="10"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="0" Content="{TemplateBinding Icon}" Height="16" Width="16" Margin="4" VerticalAlignment="Center"/>
                    <fa:ImageAwesome x:Name="check" Icon="Check" Height="8" Width="8" Margin="8" VerticalAlignment="Center" Visibility="Collapsed"/>
                    <ContentPresenter Grid.Column="2" Content="{TemplateBinding Header}" Margin="5,2" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    <TextBlock Grid.Column="3" Text="{TemplateBinding InputGestureText}" Margin="5,2" VerticalAlignment="Center"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource HighlightBrush}"/>
                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Separator">
                        <Rectangle Margin="33,2,2,2" Height="1" Fill="{StaticResource GrayBrush}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource DefaultButtonBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="2">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource HighlightBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource DisabledButtonBrush}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}"/>
                                <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Expanders -->
        <Style x:Key="ExpanderHeaderTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <Style x:Key="ExpanderHeaderStyle" TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <fa:ImageAwesome Grid.Column="0" x:Name="Icon" Icon="ChevronRight"
                                    Margin="4" Height="12" Width="12" Foreground="{TemplateBinding Foreground}"/>
                            <ContentPresenter Grid.Column="1" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="Icon" Property="Icon" Value="ChevronDown"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Expander">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Expander">
                        <Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                            <StackPanel Orientation="Vertical" Margin="5">
                                <ToggleButton Style="{StaticResource ExpanderHeaderStyle}" Content="{TemplateBinding Header}"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        Foreground="{TemplateBinding Foreground}"/>
                                <Separator x:Name="Separator" Visibility="Collapsed" Margin="5"/>
                                <ContentPresenter x:Name="Content" Visibility="Collapsed"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter TargetName="Separator" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="Content" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Forms -->
        <Style x:Key="FormStyle" TargetType="FrameworkElement">
            <Style.Resources>
                <Style TargetType="TextBlock">
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="Padding" Value="0,7,0,0"/> <!-- Vertical align to TextBox first line -->
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </Style>
                <Style TargetType="TextBox">
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu>
                                <MenuItem Command="ApplicationCommands.Copy"/>
                                <MenuItem Command="ApplicationCommands.Cut"/>
                                <MenuItem Command="ApplicationCommands.Paste"/>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="Padding" Value="4"/>
                    <Setter Property="MinHeight" Value="32"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
                    <Style.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip">
                                <Setter.Value>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="(Validation.Errors)"
                                            Converter="{StaticResource ValidationConverter}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="extensions:TokenListView">
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="MinHeight" Value="32"/>
                    <Style.Resources>
                        <Style TargetType="TextBox">
                            <Setter Property="Padding" Value="1"/>
                            <Setter Property="MinHeight" Value="20"/>
                            <Setter Property="MinWidth" Value="20"/>
                            <Setter Property="TextWrapping" Value="Wrap"/>
                        </Style>
                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </Style.Resources>
                </Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Margin" Value="4"/>
                </Style>
            </Style.Resources>
        </Style>

    </Application.Resources>
</Application>
